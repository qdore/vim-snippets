priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet class "class .. (class)"
class ${1:`!p snip.rv = "Handler" or "name"`}
{
public:
    ${1/(\w+).*/$1/}(${2:arguments});
    virtual ~${1/(\w+).*/$1/}();
public:
    ${3:/* public function */}

private:
    ${4:/* private member */}
private:
    /* disable copy constructor and assignment operator */
    ${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/}&);
    ${1/(\w+).*/$1/}& operator=(const ${1/(\w+).*/$1/}&);
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
    ${VISUAL}${0}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
    char buf[1024];
    while(size_t len = fread(buf, 1, sizeof(buf), fp))
        v.insert(v.end(), buf, buf + len);
    fclose(fp);
}
endsnippet

snippet std::set "std::set (set)"
std::set<${1:key}> ${2:set};
endsnippet

snippet std::unordered_set "std::unordered_set (set)"
std::unordered_set<${1:key}> ${2:set};
endsnippet

snippet boost::unordered_set "boost::unordered_set (set)"
boost::unordered_set<${1:key}> ${2:set};
endsnippet

snippet std::map "std::map (map)"
std::map<${1:key}, ${2:value}> ${3:map};
endsnippet

snippet std::unordered_map "std::unorderd_map (map)"
std::unordered_map<${1:key}, ${2:value}> ${3:map};
endsnippet

snippet boost::unordered_map "boost::unorderd_map (map)"
boost::unordered_map<${1:key}, ${2:value}> ${3:map};
endsnippet

snippet std::vector "std::vector (v)"
std::vector<${1:char}> ${2:vec};
endsnippet

snippet template "template <typename ..> (template)"
template <typename ${1:_InputIter}>
${VISUAL}${0}
endsnippet

# vim:ft=snippets:
